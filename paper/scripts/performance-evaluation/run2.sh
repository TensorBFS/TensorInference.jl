#!/bin/bash

output_file=$1

problems=(
  #"relational_2" # OutOfMemoryError()
  "Promedus_26"
  "Promedus_24"
  "Promedus_29"
  "ObjectDetection_12"
  "ObjectDetection_14"
  "ObjectDetection_15"
  "ObjectDetection_17"
  "ObjectDetection_18"
  "ObjectDetection_20"
  "ObjectDetection_21"
  "ObjectDetection_24"
  "ObjectDetection_25"
  "ObjectDetection_27"
  "ObjectDetection_32"
  "ObjectDetection_33"
  "ObjectDetection_37"
  "ObjectDetection_40"
  "ObjectDetection_41"
  "ObjectDetection_44"
  "ObjectDetection_45"
  "ObjectDetection_49"
  "ObjectDetection_50"
  "ObjectDetection_56"
  "ObjectDetection_57"
  "ObjectDetection_60"
  "ObjectDetection_64"
  "ObjectDetection_65"
  "ObjectDetection_68"
  "ObjectDetection_69"
  "ObjectDetection_73"
  "Promedus_33"
  "ObjectDetection_11"
  "ObjectDetection_13"
  "ObjectDetection_16"
  "ObjectDetection_19"
  "ObjectDetection_22"
  "ObjectDetection_23"
  "ObjectDetection_26"
  "ObjectDetection_31"
  "ObjectDetection_34"
  "ObjectDetection_36"
  #"ObjectDetection_39"
  "ObjectDetection_43"
  "ObjectDetection_46"
  "ObjectDetection_48"
  "ObjectDetection_51"
  "ObjectDetection_53"
  "ObjectDetection_55"
  "ObjectDetection_59"
  "ObjectDetection_61"
  "ObjectDetection_63"
  "ObjectDetection_67"
  "ObjectDetection_70"
  "ObjectDetection_72"
  "ObjectDetection_74"
  "ObjectDetection_29"
  "Promedus_30"
  "ObjectDetection_30"
  "ObjectDetection_35"
  "ObjectDetection_38"
  "ObjectDetection_42"
  "ObjectDetection_47"
  "ObjectDetection_52"
  "ObjectDetection_54"
  "ObjectDetection_58"
  "ObjectDetection_62"
  "ObjectDetection_66"
  "ObjectDetection_71"
  "ObjectDetection_75"
  "ObjectDetection_28"
  #"relational_3"
  "Promedus_32"
  "Promedus_22"
  "Promedus_31"
  "Promedus_35"
  "Promedus_36"
  "Promedus_21"
  "Promedus_13"
  "Grids_12"
  "Promedus_15"
  #"relational_5"
  "CSP_12"
  "Promedus_16"
  "Segmentation_14"
  "Segmentation_11"
  "Segmentation_12"
  "Segmentation_16"
  "Segmentation_15"
  "Promedus_11"
  "CSP_11"
  "Segmentation_13"
  "Promedus_34"
  "Promedus_28"
  "Promedus_27"
  "Pedigree_13"
  "Pedigree_11"
  "Pedigree_12"
  #"linkage_19"
  #"linkage_21"
  "Promedus_20"
  #"linkage_16"
  "Promedus_12"
  "Promedus_38"
  "Promedus_23"
  #"linkage_22"
  #"linkage_18"
  "linkage_24"
  "CSP_13"
  "Grids_11"
  "Grids_13"
  "Grids_14"
  "Alchemy_11"
  #"linkage_14"
  "Promedus_17"
  #"linkage_25"
  "Promedus_37"
  #"DBN_11"
  #"DBN_14"
  "Grids_15"
  "Grids_16"
  "Grids_17"
  "Grids_18"
  "Promedus_19"
  "Promedus_25"
  #"linkage_23" # OutOfMemoryError()
  #"linkage_17"
  #"DBN_12" # OutOfMemoryError() (TensorInference.jl)
  #"DBN_15" # OutOfMemoryError() (TensorInference.jl)
  #"Promedus_18"
  "Promedus_14"
  #"linkage_20" # OutOfMemoryError()
  #"DBN_13"
  #"DBN_16"
  #"linkage_27"
  #"linkage_13"
  #"linkage_12"
  #"linkage_26"
  #"linkage_11"
  #"linkage_15" # OutOfMemoryError()
  #"relational_4"
  #"relational_1"
)

#problems=(
#  "Promedus_34"
#  "Promedus_35"
#)

# Init CSV file header
touch "$output_file"
echo 'problem,library,execution_time' >> $output_file

# Start recording the benchmark execution time
start_time=$(date +%s)

echo -e "Starting benchmark..."
for problem in ${problems[@]}; do
  echo -e "Problem: $problem"
  OMP_NUM_THREADS=1 julia --threads 1 --project=@. run-TensorInference.jl --problem "$problem" --output-file "$output_file"
  OMP_NUM_THREADS=1 julia --threads 1 --project=@. run-JunctionTrees-v1.jl --problem "$problem" --output-file "$output_file"
  OMP_NUM_THREADS=1 julia --threads 1 --project=@. run-JunctionTrees-v2.jl --problem "$problem" --output-file "$output_file"
  OMP_NUM_THREADS=1 julia --threads 1 --project=@. run-merlin.jl --problem "$problem" --output-file "$output_file"
  OMP_NUM_THREADS=1 julia --threads 1 --project=@. run-libdai.jl --problem "$problem" --output-file "$output_file"
done
echo -e "Benchmark finished"

# Log the benchmark execution time
end_time=$(date +%s)
execution_time=$((end_time - start_time))
formatted_time=$(date -u -d @"$execution_time" +%H:%M:%S)
echo "Benchmark execution time: $formatted_time"

echo -e "Generating plot..."
julia --project=@. generate-graph.jl $output_file
echo -e "Plot generated"
